-- Enable UUID extension
create extension if not exists "uuid-ossp";

-- Create user profiles table
create table public.profiles (
  id uuid not null references auth.users(id) on delete cascade,
  username text unique not null,
  email text not null,
  avatar_url text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  
  primary key (id),
  constraint username_length check (char_length(username) >= 3 and char_length(username) <= 30)
);

alter table public.profiles enable row level security;

-- Create wallets table (stores Starknet wallet addresses)
create table public.wallets (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references public.profiles(id) on delete cascade not null unique,
  starknet_address text unique not null,
  encrypted_private_key text, -- Optional: only if storing locally encrypted
  balance numeric(20, 8) default 0 not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.wallets enable row level security;

-- Create transaction types enum
create type public.transaction_type as enum ('send', 'receive', 'request');
create type public.transaction_status as enum ('pending', 'completed', 'failed', 'cancelled');

-- Create transactions table
create table public.transactions (
  id uuid primary key default gen_random_uuid(),
  from_user_id uuid references public.profiles(id) on delete set null,
  to_user_id uuid references public.profiles(id) on delete set null,
  from_username text,
  to_username text,
  amount numeric(20, 8) not null,
  transaction_type public.transaction_type not null,
  status public.transaction_status default 'pending' not null,
  tx_hash text, -- Starknet transaction hash
  note text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  completed_at timestamp with time zone,
  
  constraint positive_amount check (amount > 0)
);

alter table public.transactions enable row level security;

-- Create trigger function to auto-create profile
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  insert into public.profiles (id, username, email)
  values (
    new.id,
    new.raw_user_meta_data->>'username',
    new.email
  );
  return new;
end;
$$;

-- Trigger to create profile on user signup
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- RLS Policies for profiles
create policy "Users can view all profiles"
  on public.profiles for select
  to authenticated
  using (true);

create policy "Users can update own profile"
  on public.profiles for update
  to authenticated
  using (auth.uid() = id);

-- RLS Policies for wallets
create policy "Users can view own wallet"
  on public.wallets for select
  to authenticated
  using (auth.uid() = user_id);

create policy "Users can insert own wallet"
  on public.wallets for insert
  to authenticated
  with check (auth.uid() = user_id);

create policy "Users can update own wallet"
  on public.wallets for update
  to authenticated
  using (auth.uid() = user_id);

-- RLS Policies for transactions
create policy "Users can view their transactions"
  on public.transactions for select
  to authenticated
  using (auth.uid() = from_user_id or auth.uid() = to_user_id);

create policy "Users can insert their transactions"
  on public.transactions for insert
  to authenticated
  with check (auth.uid() = from_user_id or auth.uid() = to_user_id);

create policy "Users can update their transactions"
  on public.transactions for update
  to authenticated
  using (auth.uid() = from_user_id or auth.uid() = to_user_id);

-- Create indexes for performance
create index profiles_username_idx on public.profiles(username);
create index wallets_user_id_idx on public.wallets(user_id);
create index wallets_starknet_address_idx on public.wallets(starknet_address);
create index transactions_from_user_idx on public.transactions(from_user_id);
create index transactions_to_user_idx on public.transactions(to_user_id);
create index transactions_status_idx on public.transactions(status);
create index transactions_created_at_idx on public.transactions(created_at desc);

-- Function to get user by username
create or replace function public.get_user_by_username(search_username text)
returns table (
  id uuid,
  username text,
  avatar_url text
)
language sql
stable
security definer
set search_path = public
as $$
  select id, username, avatar_url
  from public.profiles
  where username = search_username;
$$;
